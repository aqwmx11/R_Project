find.package("devtools")
install.packages("devtools")
library(devtools)
find-rtools()
find_rtools()
q()
install.packages("swirl")
package_version("swirl")
library(swirl)
install.packages("swirl")
package_version(swirl)
packageVersion(swirl)
packageVersion("swirl")
library(swirl)
swirl()
bye()
q()
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
file.list()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path(folder1,folder2)
file.path('folder1','folder2')
?dir.create
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"illusion")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,times=1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(ma_na)
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
ma_data
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
Q()
q()
?for
?format.dist
?for
while
clear
clear()
q()
for (x in 1:20)
print(x)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
max2(22,55)
q()
library(swirl)
swirl()
TRUE=TRUE
TRUE==TRUE
(FALSE==FALSE)==ALSE
(FALSE==FALSE)==FALSE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8,8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Hello World!")
submit()
mad_libs(USA,clever,iphone)
mad_libs(place="UK",adjective="clever",noun="iphone")
submit()
"I" %p% "love" %p% "R!"
dl<-Sys.Date()
dl<-Sys.Date()<-Sys.Date()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
bye()
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 1:10
if(x > 5) {
x <- 0
}
q()
source('D:/R/coursera/R programming/pollutantmean.R')
source('D:/R/coursera/R programming/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
q()
source('D:/R/coursera/R programming/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
clear()
clear
pollutantmean("specdata", "sulfate", 1:10)
q()
source('D:/illusion/Documents/cachematrix.R')
my_matrix<-matrix(1:20,nrow=4,ncol=5)
my_matrix
temp<-makeCacheMatrix(my_matrix)
cacheSolve(temp)
cacheSolve(temp)
source('D:/R/coursera/R programming/makeVector.R')
my_vector<-seq(1:20)
temp2<-makeVector(my_vector)
cachemean(temp2)
cachemean(temp2)
class(my_matrix)
source('D:/illusion/Documents/cachematrix.R')
temp<-makeCacheMatrx(my_matrix)
temp<-makeCacheMatrix(my_matrix)
cacheSolve(temp)
source('D:/illusion/Documents/cachematrix.R')
my_matrix<-matrix(1:16,nrow=4,ncol=4)
temp<-makeCacheMatrix(my_matrix)
cacheSolve(temp)
my_matrix<-matrix(c(1,5,3,2,8,5,3,6,2,5,8,2,4,8,7,1),nrow=4,ncol=4)
temp<-makeCacheMatrix(my_matrix)
cacheSolve(temp)
cacheSolve(temp)
q()
source('D:/illusion/Documents/cachematrix.R')
my_matrix<-matrix(c(1,2,5,2,8,6,3,2,5),3,3)
temp<-makeCacheMatrix(my_matrix)
cacheSolve(temp)
cacheSolve(temp)
q()
setwd("D:/R/coursera/getting and cleaning data")
source('D:/R/coursera/getting and cleaning data/run_analysis.R')
feature<-read.table("./UCI HAR Dataset/features.txt")
head(feature)
feature<-read.table("./UCI HAR Dataset/features.txt")[,2]
head(feature)
mean_std <- grep(("mean\\(\\)|std\\(\\)"), feature)
head(mean_std)
mean_std
feature<-read.table("./UCI HAR Dataset/features.txt",stringsAsFactors = FALSE)[,2]
mean_std <- grep(("mean\\(\\)|std\\(\\)"), feature)
mean_std
finaldata<-fulldata[,c(1,2,mean_std+2)]
head(finaldata)
colnames(finaldata) <- c("subject", "activity", feature[mean_std])
head(finaldata)
activity<-read.table("./UCI HAR Dataset/activity_labels.txt")
activity
finaldata$activity<-factor(finaldata$activity,levels=activity[,1],labels = activity[,2])
head(finaldata)
names(finaldata) <- gsub("\\()", "", names(finaldata))
names(finaldata) <- gsub("^t", "time", names(finaldata))
names(finaldata) <- gsub("^f", "frequence", names(finaldata))
names(finaldata) <- gsub("-mean", "Mean", names(finaldata))
names(finaldata) <- gsub("-std", "Std", names(finaldata))
head(finaldata)
library(dplyr)
summarise_each(funs(mean))
library(dplyr)
groupdata <- finaldata %>%
group_by(subject, activity) %>%
summarise_each(funs(mean))
head(groupdata)
write.table(groupdata, "groupdata.txt", row.names = FALSE)
